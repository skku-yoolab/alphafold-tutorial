{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AlphaFold \uc329\ucd08\ubcf4 \uac00\uc774\ub4dc(?)","text":""},{"location":"#_1","title":"\uc900\ube44\ubb3c","text":""},{"location":"#_2","title":"\uae30\uacc4 \uc900\ube44\ud558\uae30","text":"<ol> <li>Linux\uac00 \uc124\uce58\ub41c AMD64 CPU\uac00 \uc124\uce58\ub41c computer.<ul> <li>Intel Core seriers, Xeon series, ...</li> <li>AMD Ryzen, EPYC, ...</li> </ul> </li> <li>NVIDIA GPU\uac00 \ud544\uc694\ud568.<ul> <li>High-end gaming GPUs: RTX 3090, RTX 4090</li> <li>Data center GPUs: V100, A100, ...</li> </ul> </li> <li>Git\uacfc Python 3\uc774 \uc124\uce58\ub418\uc5b4 \uc788\uc5b4\uc57c \ud568.</li> </ol>"},{"location":"#docker_engine","title":"Docker Engine","text":""},{"location":"#docker","title":"Docker\ub294 \ubb34\uc5c7\uc778\uac00","text":"<ul> <li>Docker\ub294 \ud658\uacbd\uc744 \ubd84\ub9ac\ud558\uc5ec \ub9ac\uc18c\uc2a4\ub97c \uad00\ub9ac\ud558\uace0 \uc758\uc874\uc131 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub294 solution\uc784.</li> <li>Software engineering\uc5d0\uc11c \uc808\ucc2c\ub9ac \uc0ac\uc6a9\uc911 (2023\ub144 \uae30\uc900)</li> <li>\uc774\uacf3\uc5d0 Linux \ubc30\ud3ec\ud310 \ubcc4\ub85c \uc124\uce58 \ubc29\ubc95\uc774 \uc0c1\uc138\ud558\uac8c \uc791\uc131\ub418\uc5b4 \uc788\uc74c.</li> <li>Google\uc774 \ub9e4\uc6b0 \uc798 \ud65c\uc6a9\ud558\uace0 \uc788\uc73c\ubbc0\ub85c AlphaFold\ub3c4 Docker \uae30\ubc18\uc73c\ub85c \ubc30\ud3ec\ub418\uace0 \uc788\uc74c.</li> </ul>"},{"location":"#docker_engine_1","title":"Docker Engine \uc124\uce58\ud558\uae30","text":"<ul> <li>OS\ub294 Linux\ub9cc \uac00\ub2a5\ud568.</li> <li>\ubc30\ud3ec\ud310\uc740 Ubuntu, REHL \uac19\uc740 \uc720\uba85\ud55c \uac83\uc740 \uac00\ub2a5\ud568.</li> <li>Superuser \uad8c\ud55c\uc774 \ud544\uc694\ud568.</li> <li>Ubuntu 22.04 LTS\uae30\uc900\uc73c\ub85c \uc124\uba85\ud568.</li> </ul> <p>Apt\ub294 Ubuntu\uc640 \uac19\uc740 Debian \uacc4\ud1b5 \ubc30\ud3ec\ud310\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 (Apple\uc758 \uc571\uc2a4\ud1a0\uc5b4 \uac19\uc740) \ud328\ud0a4\uc9c0 \uad00\ub9ac\uc790\uc784. \ub2e4\uc74c\uc740 APT\uc5d0 Docker\uc758 \uc800\uc7a5\uc18c\ub97c \ub4f1\ub85d\ud558\ub294 \uacfc\uc815\uc784.</p> <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl gnupg\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \"$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\")\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> <p>Docker Engine\uc744 \ubc1b\uc544\uc640\uc11c \uc124\uce58\ud568.</p> <pre><code>sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <p>\ub2e4\uc74c\uc744 \uc2e4\ud589\ud588\uc744 \ub54c \uc544\ub798\uc640 \uac19\uc774 \ucd9c\ub825\ub418\uba74 \uc131\uacf5!</p> <pre><code>sudo docker run hello-world\n</code></pre> <p></p>"},{"location":"#root_docker","title":"Root \uad8c\ud55c \uc5c6\uc774 Docker \uc0ac\uc6a9\ud558\uae30","text":"<ul> <li>Docker\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc2e4\ud589\uc5d0 root \uad8c\ud55c\uc774 \ud544\uc694\ud568.</li> <li>\ud2b9\uc815 \uc0ac\uc6a9\uc790\uc5d0\uac8c Docker\uc758 \uc0ac\uc6a9 \uad8c\ud55c\uc744 \ubd80\uc5ec\ud560 \uc218 \uc788\uc74c.</li> </ul> <p><code>$USER</code>\ub97c \uad8c\ud55c\uc744 \ubd80\uc5ec\ud560 \uc0ac\uc6a9\uc790\uc758 \uc774\ub984\uc73c\ub85c \ubcc0\uacbd\ud558\uc5ec \ub2e4\uc74c\uc744 \uc2e4\ud589\ud558\uba74 \uc0ac\uc6a9\uc790\uac00 \ub4f1\ub85d\ub428.</p> <pre><code>sudo groupadd docker\nsudo usermod -aG docker $USER\n</code></pre>"},{"location":"#nvidia_contatiner_toolkit","title":"NVIDIA Contatiner Toolkit","text":"<ul> <li>Docker container \ub0b4\ubd80\uc5d0\uc11c GPU\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c \ud544\uc694\ud55c toolkit\uc784.</li> <li>System\uc5d0 \ubc18\ub4dc\uc2dc CUDA driver\uac00 \uc124\uce58\ub418\uc5b4 \uc788\uc5b4\uc57c \uc791\ub3d9\ud568.</li> </ul>"},{"location":"#cuda_driver","title":"CUDA driver \uc124\uce58\ud558\uae30","text":"<p>\uc774\uacf3\uc744 \ucc38\uc870\ud558\uc5ec driver\ub97c \uc124\uce58\ud558\uba74 \ub428. (\uc0dd\ub7b5)</p>"},{"location":"#nvidia_container_toolkit","title":"NVIDIA Container Toolkit \uc124\uce58\ud558\uae30","text":"<p>\uc774\uacf3 \ub2e4\ub978 \ubc30\ud3ec\ud310\uc5d0 \uad00\ud558\uc5ec \uc124\uba85\ub418\uc5b4 \uc788\uc74c.</p> <p>Apt\uc5d0 \uc800\uc7a5\uc18c \ub4f1\ub85d\ud558\uae30.</p> <pre><code>curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\\n  &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\\n    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \\\n    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list \\\n  &amp;&amp; \\\n    sudo apt-get update\n</code></pre> <p>Apt\ub85c \ud328\ud0a4\uc9c0 \uc124\uce58\ud558\uae30.</p> <pre><code>sudo apt-get install -y nvidia-container-toolkit\n</code></pre> <p>\ub2e4\uc74c\uc744 \uc2e4\ud589\ud574\uc11c Docker\uc5d0\uc11c CUDA\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uc815\ud568.</p> <pre><code>sudo nvidia-ctk runtime configure --runtime=docker\nsudo systemctl restart docker\n\nsudo nvidia-ctk runtime configure --runtime=containerd\nsudo systemctl restart containerd\n\nsudo nvidia-ctk runtime configure --runtime=crio\nsudo systemctl restart crio\n</code></pre> <p>\ub2e4\uc74c\uc744 \uc2e4\ud589\ud588\uc744 \ub54c \uc7a5\ucc29\ub41c \uc7a5\ube44\uc758 \uc815\ubcf4\uac00 \ucd9c\ub825\ub418\uba74 \uc131\uacf5\ud55c \uac83\uc784.</p> <pre><code>sudo docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi\n</code></pre> <p></p>"},{"location":"#alphafold_1","title":"AlphaFold \uc124\uce58\ud558\uae30","text":""},{"location":"#alphafold_git","title":"AlphaFold Git \uc800\uc7a5\uc18c \ubc1b\uc544\uc624\uae30","text":"<pre><code>git clone https://github.com/deepmind/alphafold.git\ncd ./alphafold\n</code></pre>"},{"location":"#database_parameter","title":"Database\uc640 parameter \ubc1b\uc544\uc624\uae30","text":"<ul> <li>Database\ub97c \ubc1b\uc544\uc624\ub824\uba74 <code>aria2c</code>\uac00 \ud544\uc694\ud568. (<code>sudo alt install aria2</code>\ub85c \uc124\uce58\ud568.)</li> <li>\ubaa8\ub4e0 database\ub97c download\ud558\uba74 \ub300\ub7b5 2.62 TB\uc758 \uacf5\uac04\uc774 \ud544\uc694\ud568.</li> <li><code>$DOWNLOAD_DIR</code>\ub97c file\uc744 \uc800\uc7a5\ud560 directory\ub85c \ubcc0\uacbd\ud558\uace0 \ub2e4\uc74c\uc744 \uc2e4\ud589\ud568.</li> <li>\uc778\ub0b4\uc2ec\uacfc \ud070 \uacf5\uac04\uc774 \ud544\uc694\ud568. (\ud558\ub8e8\ub294 \uc7a1\uace0 \uae30\ub2e4\ub824\uc57c\ud568.)</li> <li>Download \uc911\uc5d0 \uc5f0\uacb0\uc774 \ub04a\uc5b4\uc9c4 \uacbd\uc6b0 <code>scripts/</code> directory\uc5d0 \uc788\ub294 \uac1c\ubcc4 \ud56d\ubaa9\uc744 \ubc1b\uc544\uc624\ub294 script\ub97c \uc2e4\ud589\ud558\uba74 \uc774\uc5b4\ubc1b\uae30\uac00 \ub428.</li> </ul> <pre><code>scripts/download_all_data.sh $DOWNLOAD_DIR\n</code></pre> <ul> <li>\ubaa8\ub450 \ubc1b\uc73c\uba74 \ub2e4\uc74c\uacfc \uac19\uc74c.</li> </ul> <p>```plain text $DOWNLOAD_DIR/                             # Total: ~ 2.62 TB (download: 556 GB)     bfd/                                   # ~ 1.8 TB (download: 271.6 GB)         # 6 files.     mgnify/                                # ~ 120 GB (download: 67 GB)         mgy_clusters_2022_05.fa     params/                                # ~ 5.3 GB (download: 5.3 GB)         # 5 CASP14 models,         # 5 pTM models,         # 5 AlphaFold-Multimer models,         # LICENSE,         # = 16 files.     pdb70/                                 # ~ 56 GB (download: 19.5 GB)         # 9 files.     pdb_mmcif/                             # ~ 238 GB (download: 43 GB)         mmcif_files/             # About 199,000 .cif files.         obsolete.dat     pdb_seqres/                            # ~ 0.2 GB (download: 0.2 GB)         pdb_seqres.txt     small_bfd/                             # ~ 17 GB (download: 9.6 GB)         bfd-first_non_consensus_sequences.fasta     uniref30/                              # ~ 206 GB (download: 52.5 GB)         # 7 files.     uniprot/                               # ~ 105 GB (download: 53 GB)         uniprot.fasta     uniref90/                              # ~ 67 GB (download: 34 GB)         uniref90.fasta</p> <pre><code>\n### Docker image \uc0dd\uc131\ud558\uae30\n\n- \ub2e4\uc74c \uba85\ub839\uc73c\ub85c AlphaFold docker image\ub97c \uc0dd\uc131\ud568.\n- \uaf64 \uc624\ub798 \uac78\ub9ac\ub294 \uc791\uc5c5\uc784 (10-20\ubd84 \uc815\ub3c4 \uc18c\uc694).\n\n```bash\ndocker build -f docker/Dockerfile -t alphafold .\n</code></pre> <ul> <li>(2023-10-22) Ada Lovelace (RTX 4000 series)\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 <code>docker/Dockerfile</code>\uc744 \uc218\uc815\ud574\uc57c\ud568.</li> </ul> <pre><code>--- a/docker/Dockerfile\n+++ b/docker/Dockerfile\n@@ -12,7 +12,7 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n\n-ARG CUDA=11.1.1\n-FROM nvidia/cuda:${CUDA}-cudnn8-runtime-ubuntu18.04\n+ARG CUDA=11.8.0\n+FROM nvidia/cuda:${CUDA}-cudnn8-devel-ubuntu18.04\n # FROM directive resets ARGS, so we specify again (the value is retained if\n # previously set).\n@@ -53,13 +53,13 @@ RUN wget -q -P /tmp \\\n\n # Install conda packages.\n ENV PATH=\"/opt/conda/bin:$PATH\"\n-RUN conda install -qy conda==4.13.0 \\\n-    &amp;&amp; conda install -y -c conda-forge \\\n-      openmm=7.5.1 \\\n-      cudatoolkit==${CUDA_VERSION} \\\n+# RUN conda install -qy conda==23.7.2 \\\n+RUN conda install -y -c conda-forge \\\n+      openmm=7.7.0 \\\n+      cudatoolkit=${CUDA_VERSION} \\\n       pdbfixer \\\n       pip \\\n-      python=3.8 \\\n+      python=3.9 \\\n       &amp;&amp; conda clean --all --force-pkgs-dirs --yes\n\n COPY . /app/alphafold\n@@ -70,13 +70,13 @@ RUN wget -q -P /app/alphafold/alphafold/common/ \\\n RUN pip3 install --upgrade pip --no-cache-dir \\\n     &amp;&amp; pip3 install -r /app/alphafold/requirements.txt --no-cache-dir \\\n     &amp;&amp; pip3 install --upgrade --no-cache-dir \\\n-      jax==0.3.25 \\\n-      jaxlib==0.3.25+cuda11.cudnn805 \\\n+      jax==0.4.13 \\\n+      jaxlib==0.4.13+cuda11.cudnn86 \\\n       -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html\n\n # Apply OpenMM patch.\n-WORKDIR /opt/conda/lib/python3.8/site-packages\n-RUN patch -p0 &lt; /app/alphafold/docker/openmm.patch\n+# WORKDIR /opt/conda/lib/python3.9/site-packages\n+# RUN patch -p1 &lt; /app/alphafold/docker/openmm.patch\n\n # Add SETUID bit to the ldconfig binary so that non-root users can run it.\n RUN chmod u+s /sbin/ldconfig.real\n</code></pre> <ul> <li>\ub2e4\uc74c\uacfc \uac19\uc740 \ucd9c\ub825\uc774 \ub098\uc624\uba74 \uc778\ub0b4\uc2ec\uc744 \uac16\uace0 \uae30\ub2e4\ub824\ubd05\uc2dc\ub2e4.</li> </ul> <p></p>"},{"location":"#python_dependency","title":"Python dependency \uc124\uce58\ud558\uae30","text":"<ul> <li>\uc774\uc655\uc774\uba74 Python virtual environemnt\uc774\ub098 Conda\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc758\uc874\uc131 \uad00\ub9ac\ub97c \ud558\ub294 \uac83\uc774 \uad8c\uc7a5\ub428.</li> <li>\ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud558\uc5ec \ud544\uc694\ud55c Python \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud55c\ub2e4.</li> </ul> <pre><code>pip3 install -r docker/requirements.txt\n</code></pre> <ul> <li>(2023-10-22) \ub2e4\uc74c\uc744 \uc2e4\ud589\ud558\uc5ec \uae30\ubcf8\uc73c\ub85c \uc124\uce58\ub418\ub294 \ud328\ud0a4\uc9c0\uc758 \ubc84\uc804\uc744 \ubcc0\uacbd\ud574\uc57c\ud568.</li> </ul> <pre><code>pip3 uninstall \"requests\"\npip3 install \"requests==2.28.1\"\n</code></pre>"},{"location":"#_3","title":"\uc785\ub825 \uc900\ube44\ud558\uae30","text":"<ul> <li>\ub2e8\ubc31\uc9c8\uc758 \uc11c\uc5f4\uc740 FASTA format\uc73c\ub85c \uc785\ub825\ubc1b\uc74c.</li> </ul> <p>```plain text</p> <p>Protein-G YKLILNGKTLKGETTTEAVDAATAEKVFKQYANDNGVDGEWTYDDATKTFTVTE</p> <pre><code>\n### \uc2e4\ud589\ud558\uae30\n\n- Clone\ub41c AlahaFold repository\uac00 \uc800\uc7a5\ub41c directory\uc5d0\uc11c \ub2e4\uc74c\uc744 \uc2e4\ud589\ud568.\n- `$FASTA_PATH`\uc5d0\ub294 \uc608\uce21\ud55c \uc11c\uc5f4\uc744 \ub2f4\uc740 FASTA \ud615\uc2dd\uc758 \uc785\ub825 file\uc758 \uacbd\ub85c\ub97c \ub123\uc74c.\n- `$OUTPUT_DIR`\uc5d0\ub294 \uc608\uce21 \uacb0\uacfc\ub97c \uc800\uc7a5\ud560 directroy\uc758 \uacbd\ub85c\ub97c \ub123\uc74c.\n- `$DOWNLOAD_DIR`\uc5d0\ub294 \uc704\uc5d0\uc11c download\ud55c database\uc758 \uacbd\ub85c\ub97c \ub123\uc74c.\n\n```bash\npython3 \"docker/run_docker.py\" \\\n  --fasta_paths=\"$FASTA_PATH\" \\\n  --max_template_date=\"2022-01-01\" \\\n  --model_preset=\"monomer\" \\\n  --db_preset=full_dbs \\\n  --data_dir=\"$DOWNLOAD_DIR\" \\\n  --output_dir=\"OUTPUT_DIR\"\n</code></pre>"},{"location":"#_4","title":"\uacb0\uacfc \ubd84\uc11d","text":"<ul> <li>\uc608\uce21\ub41c model\uc740 PDB \ub610\ub294 mmCIF \ud615\uc2dd\uc73c\ub85c \ucd9c\ub825\ub428.</li> <li>PyMOL, VMD, Chiemera \ub4f1\uc73c\ub85c \uc2dc\uac01\ud654 \uac00\ub2a5\ud568.</li> <li>AlphaFold\ub294 \uc790\uccb4\uc801\uc778 \uc815\ud655\ub3c4 \uc608\uce21 \uc810\uc218\ub97c \ucd9c\ub825\ud568.</li> </ul> <p>```plain text</p>"},{"location":"#database_query_result","title":"Database query result","text":"<p>msas/</p>"},{"location":"#self-confidence_predictions","title":"Self-confidence predictions","text":"<p>confidence_model_1_pred_0.json confidence_model_2_pred_0.json confidence_model_3_pred_0.json confidence_model_4_pred_0.json confidence_model_5_pred_0.json</p>"},{"location":"#input_features","title":"Input features","text":"<p>features.pkl</p>"},{"location":"#output_structure_sorted_by_predicted_condidence_scores","title":"Output structure sorted by predicted condidence scores","text":"<p>ranked_0.cif ranked_0.pdb ranked_1.cif ranked_1.pdb ranked_2.cif ranked_2.pdb ranked_3.cif ranked_3.pdb ranked_4.cif ranked_4.pdb</p>"},{"location":"#ranking_details","title":"Ranking details","text":"<p>ranking_debug.json</p>"},{"location":"#physically_relaxed_models","title":"Physically relaxed models","text":"<p>relaxed_model_2_pred_0.cif relaxed_model_2_pred_0.pdb relaxed_model_5_pred_0.cif relaxed_model_5_pred_0.pdb relax_metrics.json</p>"},{"location":"#detailed_outputs","title":"Detailed outputs","text":"<p>result_model_1_pred_0.pkl result_model_2_pred_0.pkl result_model_3_pred_0.pkl result_model_4_pred_0.pkl result_model_5_pred_0.pkl</p>"},{"location":"#unrelaxed_models","title":"Unrelaxed models","text":"<p>unrelaxed_model_1_pred_0.cif unrelaxed_model_1_pred_0.pdb unrelaxed_model_2_pred_0.cif unrelaxed_model_2_pred_0.pdb unrelaxed_model_3_pred_0.cif unrelaxed_model_3_pred_0.pdb unrelaxed_model_4_pred_0.cif unrelaxed_model_4_pred_0.pdb unrelaxed_model_5_pred_0.cif unrelaxed_model_5_pred_0.pdb ```</p>"}]}